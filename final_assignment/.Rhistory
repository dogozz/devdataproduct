View(ValidationPredictionResults)
model_rf_test <- randomForest(classe ~ ., data=testing_p)
View(testing_p)
View(testing)
model_rf_test <- randomForest(classe ~ ., data=testing)
model_rf_test <- randomForest(class ~ ., data=testing)
View(testing)
set.seed(22222)
training_url <- "http://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"
testing_url <- "http://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv"
training <- read.csv(url(training_url), na.strings=c("NA","#DIV/0!",""))
testing <- read.csv(url(testing_url), na.strings=c("NA","#DIV/0!",""))
dim(training)
dim(testing)
library(caret)
intrain <- createDataPartition(y=training$classe, p=0.6, list=FALSE)
training_p <- training[intrain, ]
testing_p <- training[-intrain, ]
dim(training_p)
dim(testing_p)
zero_variance <- nearZeroVar(training_p)
training_p <- training_p[ ,-zero_variance]
testing_p <- testing_p[ ,-zero_variance]
most_NAs <- sapply(training_p, function(x) mean(is.na(x))) > 0.6
training_p <- training_p[ , most_NAs==FALSE]
testing_p <- testing_p[ , most_NAs==FALSE]
training_p <- training_p[ , -(1:5)]
testing_p <- testing_p[ , -(1:5)]
dim(training_p)
dim(testing_p)
library(rpart)
model_Dtree <- rpart(classe ~ ., data=training_p, method="class")
library(rattle)
library(rpart.plot)
library(RColorBrewer)
fancyRpartPlot(model_Dtree)
prp(model_Dtree)
prediction_Dtree <- predict(model_Dtree, testing_p, type = "class")
## test results from the prediction_Dtree
library(caret)
confusionMatrix(prediction_Dtree, testing_p$classe)
library(randomForest)
model_rf <- randomForest(classe ~ ., data=training_p)
prediction_rf <- predict(model_rf, testing_p, type = "class")
confusionMatrix(prediction_rf, testing_p$classe)
model_lda <- train(classe ~ ., data=training_p, method = "lda")
prediction_lda <- predict(model_lda, testing_p)
confusionMatrix(testing_p$classe, prediction_lda)
predValidation <- predict(model_rf, newdata=testing)
View(testing)
ValidationPredictionResults <- data.frame(
problem_id=validation$problem_id,
predicted=predValidation
)
predicted=predValidation
predValidation <- predict(model_rf, newdata=testing)
ValidationPredictionResults <- data.frame(
problem_id=testing$problem_id,
predicted=predValidation
)
print(ValidationPredictionResults)
model_Dtree <- rpart(classe ~ ., data=training_p, method="class")
prediction_validation <- predict(model_rf, newdata=testing)
prediction_results <- data.frame(problem_id=testing$problem_id, predicted=predValidation)
prediction_results
prediction_validation <- predict(model_rf, newdata=testing)
prediction_results <- data.frame(problem_id=testing$problem_id, predicted=prediction_validation)
prediction_results
class A{ public int t = 20; } public class Main { public static void main(String[] args ) { A m = new A(); System. out .println( m . t ); } }
pred_test <- predict( model_rf, test)
library(caret)
pred_test <- predict( model_rf, test)
library(randomForest)
pred_test <- predict( model_rf, test)
training <- read.csv(url(training_url), na.strings=c("NA","#DIV/0!",""))
testing <- read.csv(url(testing_url), na.strings=c("NA","#DIV/0!",""))
dim(training)
dim(testing)
library(caret)
intrain <- createDataPartition(y=training$classe, p=0.6, list=FALSE)
training_p <- training[intrain, ]
testing_p <- training[-intrain, ]
dim(training_p)
dim(testing_p)
zero_variance <- nearZeroVar(training_p)
training_p <- training_p[ ,-zero_variance]
testing_p <- testing_p[ ,-zero_variance]
most_NAs <- sapply(training_p, function(x) mean(is.na(x))) > 0.6
training_p <- training_p[ , most_NAs==FALSE]
testing_p <- testing_p[ , most_NAs==FALSE]
training_p <- training_p[ , -(1:5)]
testing_p <- testing_p[ , -(1:5)]
dim(training_p)
dim(testing_p)
pred_test <- predict( model_rf, test)
model_rf <- randomForest(classe ~ ., data=training_p)
prediction_rf <- predict(model_rf, testing_p, type = "class")
confusionMatrix(prediction_rf, testing_p$classe)
pred_test <- predict( model_rf, testing_p)
confusionMatrix(pred, test$classe)
confusionMatrix(pred, testing_p$classe)
confusionMatrix(pred_test, testing_p$classe)
out_sample_error <- sum(pred_test == testing_p$classe)/length(pred_test)
out_sample_error
out_sample_error <- 1-out_sample_error_accuracy
out_sample_error_accuracy <- sum(pred_test == testing_p$classe)/length(pred_test)
out_sample_error_accuracy
out_sample_error <- 1-out_sample_error_accuracy
out_sample_error
out_sample_error*100
prediction_validation <- predict(model_rf, newdata=testing)
prediction_results <- data.frame(problem_id=testing$problem_id, predicted=prediction_validation)
prediction_results
pred_test <- predict( model_rf, testing_p)
confusionMatrix(pred_test, testing_p$classe)
## checking the accuracy of the model
out_sample_error_accuracy <- sum(pred_test == testing_p$classe)/length(pred_test)
out_sample_error_accuracy
## the sample error will be:
out_sample_error <- 1-out_sample_error_accuracy
out_sample_error*100
```
## checking the accuracy of the model
pred_test <- predict( model_rf, testing_p)
confusionMatrix(pred_test, testing_p$classe)
## checking the accuracy of the model
out_sample_error_accuracy <- sum(pred_test == testing_p$classe)/length(pred_test)
out_sample_error_accuracy
## the sample error will be:
out_sample_error <- 1-out_sample_error_accuracy
out_sample_error*100
```
install.packages("shiny")
library(shiny)
install.packages("rsconnect")
library(rsconnect)
rsconnect::setAccountInfo(name='dogozz', token='553107BF93254173807FB1B18357B317', secret='<SECRET>')
rsconnect::setAccountInfo(name='dogozz', token='553107BF93254173807FB1B18357B317', secret='AMN3+oQogeb7YXZEdyngFSDkxjQdsrsySt0vpfPO')
library(rsconnect)
rsconnect::deployApp('path/to/your/app')
install.packages("devtools")
install.packages("manipulate")
install.packages("rCharts")
install.packages("rCharts")
install.packages("morris")
install.packages("xCharts")
install.packages("slidify")
install.packages("slidify")
devtools::install_github.
devtools::install_github
pkgs <- c('ramnathv/slidifyLibraries', 'ramnathv/slidify')
devtools::install_github(pkgs)
library(devtools)
install_github("ropensci/plotly")
install.packages("tibble")
install_github("ropensci/plotly")
library(plotly)
exit
quit
quit()
library(manipulate)
myPlot <- function(s) {
plot(cars$dist - mean(cars$dist), cars$speed - mean(cars$speed))
abline(0, s)
}
manipulate(myPlot(s), s = slider(0, 2, step = 0.1))
manipulate(myPlot(s), x.s = slider(0, 2, step = 0.1))
manipulate(myPlot(s), slider=x(0, 2, step = 0.1))
manipulate(myPlot(s), s = slider(0, 2, step = 0.1))
library(rCharts)
install.packages(rCharts)
install.packages("rCharts")
library(devtools)
install_github("ramnathv/rCharts@dev")
library(rCharts)
d <- data.frame(airquality, stringsAsFactors = FALSE)print(d)
dTable(airquality, sPaginationType = "full_numbers")
airquality
head(airquality)
library(devtools)
library(slidify)
diabetesRisk <- function(glucose) glucose/200
library(shiny)
shinyUI(pageWithSidebar(
headerPanel("Data science FTW!"),
sidebarPanel(
h3('Sidebar text')
),
mainPanel(
h3('Main Panel text')
)
))
runApp('test1')
shiny::runApp('shinyproject')
runApp('shinyproject')
runApp('shinyproject')
runApp('shinyproject')
runApp('shinyproject')
View(diabetesRisk)
runApp('shinyproject')
runApp('shinyproject')
data <- read.csv("crime.csv", sep=",", header=TRUE)
getwd()
cd..
setwd("C:/Documents/shinyproject")
setwd("C:/Documents/shinyproject")
runApp('shinyproject')
data <- read.csv("crime.csv", sep=",", header=TRUE)
data <- read.csv("~/crime.csv", sep=",", header=TRUE)
data <- read.csv("C:/documentos/shinyproject/crime.csv", sep=",", header=TRUE)
getwd
getwd()
setwd("C:/Documentos/shinyproject")
data <- read.csv("C:/documentos/shinyproject/crime.csv", sep=",", header=TRUE)
shiny::runApp('shinyproject')
runApp('shinyproject')
runApp('shinyproject')
runApp('shinyproject')
runApp('shinyproject')
mtcars$makemodel <- rownames(mtcars)
mtcars$make <- gsub( " .*$", "", mtcars$makemodel)
make <- "Mazda"
feature <- "qsec"
data <- mtcars[mtcars$make==make,feature]
paste("The mean value of",feature,"for",make,"cars is",print(mean(data)))
View(mtcars)
data$mexstate <- rownames(data)
data$mexstate <- rownames(data)
runApp('shinyproject')
data <- read.csv("C:/Users/Dogoz/Documents/shinyproject/crime.csv", sep=",", header=TRUE)
View(data)
data$mexstate <- rownames(data$state)
View(data)
data$mex <- gsub( " .*$", "", data$mexstate)
runApp('shinyproject')
data$mexstate <- rownames(data$state)
View(data)
data$mexstate <- rownames(data)
data$mexstate <- rownames(data$state)
data$mexstate <- rownames(data)
mtcars$make <- gsub( " .*$", "", mtcars$makemodel)
mtcars$make <- gsub( " .*$", "", mtcars$makemodel)
mtcars$makemodel <- rownames(mtcars)
mtcars$make <- gsub( " .*$", "", mtcars$makemodel)
View(mtcars)
runApp('shinyproject')
runApp('shinyproject')
runApp('shinyproject')
runApp('shinyproject')
WorldPhones
runApp('shinyproject')
data
data <- read.csv("C:/Users/Dogoz/Documents/shinyproject/energia.csv", sep=",", header=TRUE)
data
WorldPhones
View(data)
view(WorldPhones)
View(WorldPhones)
View(data)
runApp('shinyproject')
runApp('shinyproject')
runApp('shinyproject')
data[0]
data <- read.csv("C:/Users/Dogoz/Documents/shinyproject/energia.csv", sep=",", header=TRUE)
View(data)
data[,1]
data[,0]
data[0]
View(data)
runApp('shinyproject')
runApp('shinyproject')
runApp('shinyproject')
View(data)
runApp('shinyproject')
runApp('shinyproject')
View(data)
mean(data$fuel)
mean(data$Natural.Gas)
mean(data$Diesel)
runApp('shinyproject')
runApp('shinyproject')
runApp('shinyproject')
runApp('shinyproject')
runApp('shinyproject')
runApp('shinyproject')
df <- data.frame(Category=c(rep("A",6),rep("B",6)),
Year=rep(2010:2015,2),Value=1:12)
View(df)
library(plyr)
ddply(df, "Category", transform,
Growth=c(NA, kimisc::gdiff(Value, FUN = `/`)-1))
ddply(df, "Category", transform, Growth=c(NA, kimisc::gdiff(Value, FUN = `/`)-1))
kimisc
install.packages("kimisc")
ddply(df, "Category", transform, Growth=c(NA, kimisc::gdiff(Value, FUN = `/`)-1))
runApp('shinyproject')
shiny::runApp('shinyproject')
data[, input$fuel]
dfdf$Growth <- with(df, ave(Value, Category,
FUN=function(x) c(NA, diff(x)/x[-length(x)]) ))
df$Growth <- with(df, ave(Value, Category,
FUN=function(x) c(NA, diff(x)/x[-length(x)]) ))
View(df)
transform(df, Growth=ave(Value, Category,
FUN=function(x) c(NA,exp(diff(log(x)))-1)))
transform(df, Growth=ave(Value, Category,
FUN=function(x) c(NA,exp(diff(log(x)))-1)))
library(plyr)
ddply(df, .(Category),
function (d) {
d$Growth <- c(NA, tail(d$Value, -1) / head(d$Value, -1) - 1)
d
}
)
View(data)
data$Growth <- with(data, ave(data[,input$value], input$value,
FUN=function(x) c(NA, diff(x)/x[-length(x)]) ))
data$Growth <- with(data, ave(data$diesel], data$year,
library(plyr)
ddply(df,"Category",transform,
Growth=c(NA,exp(diff(log(Value)))-1))
library(plyr)
ddply(data,"input$fuel",transform,
Growth=c(NA,exp(diff(log(input$fuel)))-1))
runApp('shinyproject')
library(plyr)
ddply(df, .(Category),
function (d) {
d$Growth <- c(NA, tail(d$Value, -1) / head(d$Value, -1) - 1)
d
}
)
d$Value
d
library(plyr)
ddply(df, .(Category),
function (d) {
d$Growth <- c(NA, tail(d$Value, -1) / head(d$Value, -1) - 1)
d
}
)
library(plyr)
ddply(df, .(Category),
function (d) {
d$Growth <- c(NA, tail(d$Value, -1) / head(d$Value, -1) - 1)
d
}
)
d$Value
View(df)
d$Value
ddply(df, .(Category),
function (d) {
d$Growth <- c(NA, tail(d$Value, -1) / head(d$Value, -1) - 1)
d
}
)
d$Growth
runApp('shinyproject')
runApp('shinyproject')
runApp('shinyproject')
runApp('shinyproject')
runApp('shinyproject')
runApp('shinyproject')
runApp('shinyproject')
shiny::runApp('shinyproject')
install.packages("tis")
runApp('shinyproject')
runApp('shinyproject')
runApp('shinyproject')
df <- data.frame(Category=c(rep("A",6),rep("B",6)),
Year=rep(2010:2015,2),Value=1:12)
library(plyr)
ddply(df,"Category",transform,
Growth=c(NA,exp(diff(log(Value)))-1))
df$Growth <- with(df, ave(Value, Category,
FUN=function(x) c(NA, diff(x)/x[-length(x)]) ))
View(df)
df <- data.frame(Category=c(rep("A",6),rep("B",6)),
Year=rep(2010:2015,2),Value=1:12)
df
runApp('shinyproject')
runApp('shinyproject')
library(plyr)
ddply(df, .(Category),
function (d) {
d$Growth <- c(NA, tail(d$Value, -1) / head(d$Value, -1) - 1)
d
}
)
runApp('shinyproject')
runApp('shinyproject')
runApp('shinyproject')
runApp('shinyproject')
View(data)
runApp('shinyproject')
runApp('shinyproject')
runApp('shinyproject')
runApp('shinyproject')
runApp('shinyproject')
runApp('shinyproject')
runApp('shinyproject')
runApp('shinyproject')
runApp('shinyproject')
runApp('shinyproject')
runApp('shinyproject')
runApp('shinyproject')
runApp('shinyproject')
runApp('shinyproject')
runApp('shinyproject')
runApp('shinyproject')
runApp('shinyproject')
runApp('shinyproject')
runApp('shinyproject')
runApp('shinyproject')
runApp('shinyproject')
runApp('shinyproject')
View(data)
runApp('shinyproject')
runApp('shinyproject')
runApp('shinyproject')
runApp('shinyproject')
runApp('shinyproject')
runApp('shinyproject')
runApp('shinyproject')
runApp('shinyproject')
runApp('shinyproject')
runApp('shinyproject')
runApp('shinyproject')
runApp('shinyproject')
runApp('shinyproject')
runApp('shinyproject')
runApp('shinyproject')
runApp('shinyproject')
runApp('shinyproject')
View(data)
runApp('shinyproject')
runApp('shinyproject')
runApp('shinyproject')
runApp('shinyproject')
runApp('shinyproject')
runApp('shinyproject')
runApp('shinyproject')
runApp('shinyproject')
runApp('shinyproject')
runApp('shinyproject')
runApp('shinyproject')
runApp('shinyproject')
runApp('shinyproject')
runApp('shinyproject')
runApp('shinyproject')
runApp('shinyproject')
runApp('shinyproject')
runApp('shinyproject')
runApp('shinyproject')
runApp('shinyproject')
runApp('shinyproject')
runApp('shinyproject')
runApp('shinyproject')
runApp('shinyproject')
runApp('shinyproject')
runApp('shinyproject')
runApp('shinyproject')
runApp('shinyproject')
runApp('shinyproject')
runApp('shinyproject')
runApp('shinyproject')
runApp('shinyproject')
runApp('shinyproject')
runApp('shinyproject')
runApp('shinyproject')
runApp('shinyproject')
runApp('shinyproject')
runApp('shinyproject')
runApp('shinyproject')
runApp('shinyproject')
runApp('shinyproject')
runApp('shinyproject')
runApp('shinyproject')
runApp('shinyproject')
runApp('shinyproject')
runApp('shinyproject')
library(slidify)
shiny::runApp('C:/Users/Dogoz/Desktop/Nueva')
runApp('C:/Users/Dogoz/Desktop/Nueva')
library(devtools)
install_github('slidify', 'ramnathv')
install_github('slidifyLibraries', 'ramnathv')
quit()
install.packages('stringr')
devtools::install_github('muschellij2/slidify')
library(slidify)
slidify("index.Rmd")
install.packages("stringr")
quit()
slidify("index.Rmd")
library("slidify")
slidify("index.Rmd")
slidify("index.Rmd")
getwd()
install.packages("Shower")
library(RCurl)
library(bitops)
library(slidify)
options(rpubs.upload.method = "internal")
options(RCurlOptions = list(verbose = FALSE, capath = system.file("CurlSSL", "cacert.pem", package = "RCurl"), ssl.verifypeer = FALSE))
slidify("index.Rmd")
setwd("c:/users/dogoz/documents/shinyproject/final_assignment")
slidify("index.Rmd")
browseURL("index.HTML")
index <- read.table("~/shinyproject/final_assignment/index.html", header=TRUE, quote="\"")
View(index)
